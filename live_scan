import cv2
import pytesseract
import pdfplumber

# Nurodykite Tesseract OCR kelia
pytesseract.pytesseract.tesseract_cmd = r'C:\Users\guest08\AppData\Local\Programs\Tesseract-OCR\tesseract.exe'

# PDF failo kelias
pdf_path = 'C:/Users/guest08/Documents/GitHub/BIP-Estonia-Project/Instrumentation_Symbols_and_Identification.pdf'

def extract_table_from_pdf(pdf_path):
    try:
        with pdfplumber.open(pdf_path) as pdf:
            table = []
            for page in pdf.pages:
                page_table = page.extract_table()
                if page_table:
                    table.extend(page_table)

            # Filtruoti lentelės eiles
            filtered_rows = []
            for row in table:
                # Filtruojame netinkamas eilutes
                if len(row) < 3 or all(cell in [None, '', ''] for cell in row):
                    continue
                filtered_rows.append(row)

            # Grąžinkite žodyną iš lentelės
            return {row[0]: (row[1], row[2]) for row in filtered_rows if row[0] is not None}
    except Exception as e:
        print(f"Nepavyko ištraukti elementų iš PDF: {e}")
        return {}

def live_scan(elements):
    cap = cv2.VideoCapture(0)  # Pakeiskite kamerą, jei reikia

    if not cap.isOpened():
        print("Kameros nepavyko atidaryti.")
        return

    detected_symbols = []  # Sąrašas, kuriame saugosime aptiktus simbolius

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Nepavyko nuskaityti vaizdo.")
            break

        # Naudoti Tesseract OCR atpažinti tekstą
        ocr_data = pytesseract.image_to_data(frame, output_type=pytesseract.Output.DICT)

        # Patikrinkite, ar OCR rezultatas nėra tuščias
        for i in range(len(ocr_data['text'])):
            text = ocr_data['text'][i].strip()  # Pašalinti aplinkinius tarpus
            if int(ocr_data['conf'][i]) > 60 and text:  # Patikriname konfidencialumo lygį ir ar tekstas nėra tuščias
                if text in elements:
                    x = ocr_data['left'][i]
                    y = ocr_data['top'][i]
                    w = ocr_data['width'][i]
                    h = ocr_data['height'][i]
                    
                    color, description = elements[text]

                    # Išsaugome aptiktą simbolį
                    detected_symbols.append({
                        'symbol': text,
                        'description': description,
                        'coordinates': (x, y, w, h)
                    })

                    # Pažymėkite simbolį ir pridėkite aprašymą
                    cv2.putText(frame, description, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)
                    cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 2)  # Raudonas kvadratas

        # Rodykite vaizdą
        cv2.imshow('Live Scan', frame)

        # Galite spausdinti aptiktus simbolius
        for symbol_info in detected_symbols:
            print(f"Detected: {symbol_info['symbol']} - Description: {symbol_info['description']} - Coordinates: {symbol_info['coordinates']}")

        # Išeiti iš ciklo paspaudus 'q'
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()


elements = extract_table_from_pdf(pdf_path)  # Gaunate elementus iš PDF
if elements:
    live_scan(elements)
else:
    print("Nepavyko gauti elementų iš PDF.")
